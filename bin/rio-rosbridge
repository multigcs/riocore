#!/usr/bin/env python3
#
#

import argparse
import os
import sys
from functools import partial

import rospy
from std_msgs.msg import Float32, Bool

if os.path.isfile(os.path.join("riocore", "__init__.py")):
    sys.path.insert(0, os.getcwd())
elif os.path.isfile(os.path.join(os.path.dirname(os.path.dirname(__file__)), "riocore", "__init__.py")):
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import riocore

riocore_path = os.path.dirname(riocore.__file__)


class rosbridge:
    def __init__(self, args):
        self.pubs = {}
        self.args = args
        self.init_rio()
        self.init_ros()

    def init_rio(self):
        if os.path.isfile(self.args.config):
            config_file = self.args.config
        elif os.path.isfile(os.path.join(riocore_path, "configs", self.args.config)):
            config_file = os.path.join(riocore_path, "configs", self.args.config)
        else:
            print(f"can not load: {self.args.config}")
            exit(1)
        if self.args.debug:
            print(f"loading: {config_file}")

        self.project = riocore.Project(config_file)
        self.name = self.project.config["name"]
        self.target = self.args.target
        self.project.connect(self.target)
        self.phaldata = self.project.haldata()

    def init_ros(self):
        rospy.init_node("rio", anonymous=True)
        self.rate = rospy.Rate(self.args.interval)
        self.register()

    def rosname(self, halname):
        rosname = halname.replace(".", "/").replace("-", "_")
        return f"{self.args.prefix}/{rosname}"

    def callback(self, signal, data):
        signal["value"] = data.data
        if self.args.debug:
            print(signal, data.data)

    def register(self):
        for plugin_instance, haldata in self.phaldata.items():
            plugin_type = plugin_instance.NAME
            if self.args.debug:
                print(plugin_type)

            for halname, signal in haldata.get("input", {}).items():
                if self.args.debug:
                    print("   in", halname, signal.get("bool", False))
                if signal.get("bool", False):
                    self.pubs[halname] = rospy.Publisher(self.rosname(halname), Bool, queue_size=10)
                else:
                    self.pubs[halname] = rospy.Publisher(self.rosname(halname), Float32, queue_size=10)

            for halname, signal in haldata.get("output", {}).items():
                if self.args.debug:
                    print("  out", halname, signal.get("bool", False))

                cb = partial(self.callback, signal)
                if signal.get("bool", False):
                    rospy.Subscriber(self.rosname(halname), Bool, cb)
                else:
                    rospy.Subscriber(self.rosname(halname), Float32, cb)

    def run(self):
        while not rospy.is_shutdown():
            for plugin_instance, haldata in self.phaldata.items():
                for halname, signal in haldata.get("input", {}).items():
                    value = signal["value"]
                    if signal.get("bool", False):
                        self.pubs[halname].publish(value)
                    else:
                        self.pubs[halname].publish(value)

            txdata = self.project.txdata_get()
            if self.args.debug:
                print(f"tx ({len(txdata * 8)}): {txdata}")
            rxdata = self.project.transfare(txdata)
            self.project.rxdata_set(rxdata)
            if self.args.debug:
                print(f"rx ({len(rxdata * 8)}): {rxdata}")
            self.rate.sleep()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", "-d", help="debug output", default=False, action="store_true")
    parser.add_argument("--interval", "-i", help="interval in hz", type=int, default=100)
    parser.add_argument("--prefix", "-p", help="ros prefix", type=str, default="/ros")
    parser.add_argument("config", help="json configuration file", nargs="?", type=str, default=None)
    parser.add_argument("target", help="interface string", nargs="?", type=str, default="127.0.0.1:2390")
    args = parser.parse_args()

    bridge = rosbridge(args)
    bridge.run()
