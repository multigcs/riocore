#!/usr/bin/env python3
#
#

import copy
import os
import json
import sys
from math import floor, ceil

from PyQt5.QtCore import Qt, QPoint, QPointF, QRectF, QLineF
from PyQt5.QtGui import QBrush, QPainter, QPen, QFont, QPainterPath, QImage, QPixmap, QColor, QMouseEvent, QTransform
from PyQt5.QtWidgets import (
    QMenu,
    QAction,
    QLabel,
    QApplication,
    QGraphicsItem,
    QGraphicsScene,
    QGraphicsView,
    QHBoxLayout,
    QPushButton,
    QVBoxLayout,
    QWidget,
    QGraphicsPathItem,
    QGraphicsLineItem,
)


if os.path.isfile(os.path.join("riocore", "__init__.py")):
    sys.path.insert(0, os.getcwd())
elif os.path.isfile(os.path.join(os.path.dirname(os.path.dirname(__file__)), "riocore", "__init__.py")):
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


import riocore

from riocore.gui.plugins import GuiPlugins
from riocore.gui.breakouts import GuiBreakouts
from riocore.gui.modifiers import GuiModifiers
# from riocore.halpins import LINUXCNC_SIGNALS


from riocore.gui.widgets import (
    edit_file,
    edit_float,
    edit_int,
    edit_text,
    edit_bool,
    edit_combobox,
    edit_avgfilter,
)

riocore_path = os.path.dirname(riocore.__file__)


colors = [
    QColor(150, 250, 150),
    QColor(150, 150, 250),
    QColor(250, 150, 150),
    QColor(250, 250, 250),
    QColor(250, 150, 250),
    QColor(150, 50, 150),
    QColor(150, 150, 50),
    QColor(50, 150, 150),
    QColor(50, 250, 50),
    QColor(50, 150, 50),
]
grid_size = 10
grid_color = QColor(150, 150, 150)


class cfggraph:
    def edge(self, port_from, port_to, dir=None, color=None, fontcolor=None):
        print("edge", port_from, port_to)

    def node(self, title, shape=None, label=None, fontsize=None, style=None, fillcolor=None, URL=None):
        print("node", title, label)


class NodeEdgePath(QGraphicsPathItem):
    width = 2
    width_selected = 4

    def __init__(self, scene, etype, source_node, source_port, des_node, des_port, color=None):
        super().__init__(None)
        self.etype = etype
        self.scene = scene
        self._source_node = source_node
        self._source_port = source_port
        self._target_node = des_node
        self._target_port = des_port
        self.color = color
        if self.color is None:
            self.color = Qt.GlobalColor.green
        self._pen_default = QPen(self.color)
        self._pen_default.setWidthF(2)
        self.setZValue(5)
        self.setFlags(QGraphicsItem.ItemIsSelectable)
        self.setAcceptHoverEvents(True)
        self.update_edge_path()
        self.hover = False

    def paint(self, painter: QPainter, option, widget):
        if self.isSelected():
            self._pen_default = QPen(Qt.GlobalColor.yellow)
            self._pen_default.setWidthF(self.width_selected)
        else:
            self._pen_default = QPen(self.color)
            self._pen_default.setWidthF(self.width)
        if self.hover:
            self._pen_default.setWidthF(self.width_selected + 2)
        painter.setPen(self._pen_default)
        self.update_edge_path()
        painter.setBrush(Qt.NoBrush)
        painter.drawPath(self.path())

    def update_edge_path(self):
        source_pos = self._source_node.port_pos(self._source_port)
        des_pos = self._target_node.port_pos(self._target_port)
        path = QPainterPath(source_pos)
        xwidth = source_pos.x() - des_pos.x()
        xwidth = xwidth + 0.01 if xwidth == 0 else xwidth
        yheight = abs(source_pos.y() - des_pos.y())
        tangent = float(yheight) / xwidth * 0.1
        tangent_s = float(yheight) / xwidth * 0.05
        tangent *= xwidth
        tangent_s *= xwidth
        if xwidth > 0:
            if xwidth > 20:
                xwidth = 20
            tangent += xwidth
            tangent_s += xwidth
            if isinstance(self._source_node, BoardNode):
                tangent_s *= -1
        else:
            if tangent > 120:
                tangent = 120
            if tangent_s > 20:
                tangent_s = 20
        path.cubicTo(QPointF(source_pos.x() + tangent_s, source_pos.y()), QPointF(des_pos.x() - tangent, des_pos.y()), des_pos)
        self.setPath(path)

    def mouseDoubleClickEvent(self, event):
        if self.etype == "pin":
            self.scene.parent.add_modifier()
        else:
            print("# edge mouseDoubleClickEvent", self.etype)

    def hoverEnterEvent(self, event):
        self.hover = True
        self.scene.edge_hover = self
        self.update()

    def hoverLeaveEvent(self, event):
        self.hover = False
        if self.scene.edge_hover == self:
            self.scene.edge_hover = None
        self.update()


class NodeEdgeLine(QGraphicsLineItem):
    def __init__(self, source_node, source_port, des_node, des_port, color=None):
        super().__init__(None)
        self._source_node = source_node
        self._source_port = source_port
        self._target_node = des_node
        self._target_port = des_port
        self.color = color
        if self.color is None:
            self.color = Qt.GlobalColor.green
        self._pen_default = QPen(self.color)
        self._pen_default.setWidthF(2)
        self.setZValue(5)
        self.setFlags(QGraphicsItem.ItemIsSelectable)
        self.update_edge_path()

    def paint(self, painter: QPainter, option, widget):
        self.update_edge_path()
        super().paint(painter, option, widget)

    def update_edge_path(self):
        if self.isSelected():
            self._pen_default = QPen(Qt.GlobalColor.yellow)
            self._pen_default.setWidthF(7)
        else:
            self._pen_default = QPen(self.color)
            self._pen_default.setWidthF(5)
        self.setPen(self._pen_default)

        self.prepareGeometryChange()
        source_pos = self._source_node.port_pos(self._source_port)
        des_pos = self._target_node.port_pos(self._target_port)
        self.setLine(QLineF(source_pos, des_pos))


NodeEdge = NodeEdgePath


class MyNode(QGraphicsItem):
    radius = 5
    border_size = 4
    border_color = QColor(150, 150, 150)
    border_color_selected = QColor(250, 250, 250)
    border_color_hover = QColor(250, 150, 250)
    bg_color = QColor(100, 100, 100)
    title_size = 9
    info_size = 7
    text_scale = 1.8
    text_font = "Times"
    text_color = QColor(220, 220, 220)
    title_color = QColor(255, 255, 255)
    info_color = QColor(200, 200, 200)
    port_size = 8
    port_tsize = 9
    port_toff_x = 2
    port_toff_y = 2
    port_boarder = 2
    port_top = 25
    port_bottom = 5
    port_diff = 15

    def __init__(self, scene):
        super().__init__()
        self.scene = scene
        self.ports_left = {}
        self.ports_right = {}
        self.selected_port = None
        self.height = self.port_top + max(len(self.ports_left), len(self.ports_right)) * self.port_diff + self.port_bottom
        self.setAcceptHoverEvents(True)
        self.hover = False

    def boundingRect(self):
        if not hasattr(self, "pixmap"):
            self.height = self.port_top + max(len(self.ports_left), len(self.ports_right)) * self.port_diff + self.port_bottom
        return QRectF(0, 0, self.width, self.height)

    def port_info(self, port):
        return "-----"

    def port_pos(self, port):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()

        ports = list(self.ports_left)
        if port in ports:
            pos_y += ports.index(port) * self.port_diff + self.port_top

        ports = list(self.ports_right)
        if port in ports:
            pos_x = pos.x() + self.width
            pos_y += ports.index(port) * self.port_diff + self.port_top

        return QPointF(pos_x, pos_y)

    def port_index(self, port):
        ports = list(self.ports_left)
        if port in ports:
            index = ports.index(port)

        ports = list(self.ports_right)
        if port in ports:
            index = ports.index(port)

        return index

    def port_selected(self, mouse_pos):
        mouse_x = mouse_pos.x()
        mouse_y = mouse_pos.y()

        py = self.port_top
        for port in self.ports_left:
            if abs(mouse_x - (self.border_size / 2) - (self.port_size / 2)) < (self.port_size / 2) and abs(mouse_y - py) < (self.port_size / 2):
                return port
            py += self.port_diff

        py = self.port_top
        for port in self.ports_right:
            if abs(mouse_x + (self.border_size / 2) - self.width + (self.port_size / 2)) < (self.port_size / 2) and abs(mouse_y - py) < (self.port_size / 2):
                return port
            py += self.port_diff

        return None

    def paintPorts(self, painter):
        if not hasattr(self, "pixmap"):
            self.height = self.port_top + max(len(self.ports_left), len(self.ports_right)) * self.port_diff + self.port_bottom
        py = self.port_top
        for port, data in self.ports_left.items():
            direction = data.get("direction") or "all"
            port_name = data.get("title") or port
            if direction == "input":
                title = f">{port_name}"
                color = QColor(150, 250, 150)
            elif direction == "output":
                title = f"<{port_name}"
                color = QColor(250, 150, 150)
            else:
                title = port_name
                color = Qt.GlobalColor.yellow
            if (self, port) == self.scene.selection_target:
                color = Qt.GlobalColor.red
            self.paintPort(painter, "left", py, title, color)
            py += self.port_diff

        py = self.port_top
        for port, data in self.ports_right.items():
            direction = data.get("direction") or "all"
            port_name = data.get("title") or port
            if direction == "input":
                title = f"{port_name}>"
                color = QColor(150, 250, 150)
            elif direction == "output":
                title = f"{port_name}<"
                color = QColor(250, 150, 150)
            else:
                title = port_name
                color = Qt.GlobalColor.yellow
            if (self, port) == self.scene.selection_source:
                color = Qt.GlobalColor.red
            if title.startswith("sig_"):
                title = title[4:]
            self.paintPort(painter, "right", py, title, color)
            py += self.port_diff

    def paintPort(self, painter, side, y, name, color):
        painter.setPen(QPen(self.text_color, 1))
        painter.setFont(QFont(self.text_font, self.port_tsize))
        if side == "left":
            painter.fillRect(QRectF(self.border_size / 2, y - (self.port_size / 2), self.port_size, self.port_size), color)
            painter.fillRect(
                QRectF(self.border_size / 2 + (self.port_boarder / 2), y - ((self.port_size - self.port_boarder) / 2), self.port_size - self.port_boarder, self.port_size - self.port_boarder),
                Qt.GlobalColor.black,
            )
            if name:
                painter.drawText(
                    QRectF(self.border_size / 2 + self.port_size + self.port_toff_x, y - (self.port_tsize * self.text_scale / 2) - self.port_toff_y, self.width, self.port_tsize * self.text_scale),
                    Qt.AlignmentFlag.AlignLeft,
                    name,
                )
        else:
            painter.fillRect(QRectF(self.width - self.border_size / 2 - self.port_size, y - (self.port_size / 2), self.port_size, self.port_size), color)
            painter.fillRect(
                QRectF(
                    self.width - self.border_size / 2 - self.port_size + (self.port_boarder / 2),
                    y - ((self.port_size - self.port_boarder) / 2),
                    self.port_size - self.port_boarder,
                    self.port_size - self.port_boarder,
                ),
                Qt.GlobalColor.black,
            )
            if name:
                painter.drawText(
                    QRectF(0, y - (self.port_tsize * self.text_scale / 2) - self.port_toff_y, self.width - self.border_size / 2 - self.port_size - self.port_toff_x, self.port_tsize * self.text_scale),
                    Qt.AlignmentFlag.AlignRight,
                    name,
                )

    def paintBg(self, painter, title, info=""):
        painter.setRenderHint(QPainter.Antialiasing)
        path = QPainterPath()
        if self.isSelected():
            pen = QPen(self.border_color_selected, self.border_size)
            brush = QBrush(self.bg_color)
        elif self.hover:
            pen = QPen(self.border_color_hover, self.border_size)
            brush = QBrush(self.bg_color)
        else:
            pen = QPen(self.border_color, self.border_size)
            brush = QBrush(self.bg_color)

        painter.setPen(pen)
        painter.setBrush(brush)

        rect = self.boundingRect()
        # rect.adjust(self.border_size / 2, self.border_size / 2, -self.border_size / 2, -self.border_size / 2)
        path.addRoundedRect(rect, self.radius, self.radius)
        painter.setClipPath(path)
        painter.fillPath(path, painter.brush())
        painter.strokePath(path, painter.pen())

        if title:
            painter.setPen(QPen(self.title_color, 1))
            painter.setFont(QFont(self.text_font, self.title_size))
            painter.drawText(QRectF(0, self.border_size / 2, self.width, self.title_size * self.text_scale), Qt.AlignmentFlag.AlignCenter, title)

        if info:
            painter.setPen(QPen(self.info_color, 1))
            painter.setFont(QFont(self.text_font, self.info_size))
            th = self.title_size * self.text_scale
            painter.drawText(QRectF(0, self.border_size / 2 + th, self.width, self.height - self.border_size - th), Qt.AlignmentFlag.AlignCenter, info)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            if event.pos().x() > self.width / 2:
                if self.scene.selection_source == (self, self.port_selected(event.pos())):
                    self.scene.selection_source = None
                else:
                    self.scene.selection_source = (self, self.port_selected(event.pos()))
            else:
                if self.scene.selection_target == (self, self.port_selected(event.pos())):
                    self.scene.selection_target = None
                else:
                    self.scene.selection_target = (self, self.port_selected(event.pos()))

            if self.selected_port != self.port_selected(event.pos()):
                self.selected_port = self.port_selected(event.pos())
            else:
                self.selected_port = None
            self.update()
            QGraphicsItem.mousePressEvent(self, event)

    def hoverEnterEvent(self, event):
        self.hover = True
        self.scene.hover = self
        self.update()

    def hoverLeaveEvent(self, event):
        self.hover = False
        if self.scene.hover == self:
            self.scene.hover = None
        self.update()


class BoardNode(QGraphicsItem):
    def __init__(self, scene, board_setup):
        super().__init__()
        self.scene = scene
        self.board_setup = board_setup
        self.setZValue(1)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.setAcceptHoverEvents(True)
        board = board_setup["board"]
        image = f"riocore/boards/{board}/board.png"
        pixmap = QPixmap.fromImage(QImage(image))
        pixmap = pixmap.transformed(QTransform().rotate(self.board_setup["config"]["flow"]["board"]["rotate"]))
        pixmap_width = pixmap.width()
        pixmap_height = pixmap.height()
        self.name = board
        self.width = pixmap_width // 2
        self.height = pixmap_height // 2
        self.pixmap = pixmap.scaled(self.width, self.height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.ports = {}
        data = open(f"riocore/boards/{board}/board.json", "r").read()
        self.jdata = json.loads(data)
        for slot in self.jdata["slots"]:
            slot_name = slot["name"]
            for pin_name, pin_data in slot["pins"].items():
                pos = pin_data.get("pos") or slot.get("pos")
                if self.board_setup["config"]["flow"]["board"]["rotate"] == 90:
                    pos = [pixmap_width - pos[1], pos[0]]
                elif self.board_setup["config"]["flow"]["board"]["rotate"] == -90:
                    pos = [pos[1], pixmap_height - pos[0]]
                elif self.board_setup["config"]["flow"]["board"]["rotate"] == 180:
                    pos = [pixmap_width - pos[0], pixmap_height - pos[1]]
                self.ports[f"{slot_name}:{pin_name}"] = pin_data
                self.ports[f"{slot_name}:{pin_name}"]["pos"] = pos
                self.ports[pin_data.get("pin")] = pin_data
                self.ports[pin_data.get("pin")]["pos"] = pos
        self.selected_port = None

    def rotate_cw(self):
        if self.board_setup["config"]["flow"]["board"]["rotate"] < 180:
            self.board_setup["config"]["flow"]["board"]["rotate"] += 90
        else:
            self.board_setup["config"]["flow"]["board"]["rotate"] = -90
        self.scene.parent.redraw()
        self.scene.parent.snapshot()

    def boundingRect(self):
        return QRectF(0, 0, self.width, self.height)

    def port_info(self, port):
        pin_data = self.ports.get(port)
        if pin_data:
            return f"{pin_data['pin']} {pin_data.get('comment', '')}"
        return ""

    def port_pos(self, port):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        if port in self.ports and self.ports[port]["pos"]:
            pos_x += self.ports[port]["pos"][0] // 2
            pos_y += self.ports[port]["pos"][1] // 2
        return QPointF(pos_x, pos_y)

    def port_selected(self, mouse_pos):
        mouse_x = mouse_pos.x()
        mouse_y = mouse_pos.y()
        for port in self.ports:
            if not self.ports[port]["pos"]:
                continue
            x = self.ports[port]["pos"][0] // 2
            y = self.ports[port]["pos"][1] // 2
            if abs(mouse_x - x) < 5 and abs(mouse_y - y) < 5:
                return port
        return None

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.board_setup["config"]["flow"]["board"]["pos"] = (pos_x, pos_y)

        painter.drawRect(self.boundingRect())
        painter.drawPixmap(0, 0, self.pixmap)
        for port in self.ports:
            if not self.ports[port]["pos"]:
                continue
            if ":" not in port:
                continue
            pos_x = self.ports[port]["pos"][0] // 2
            pos_y = self.ports[port]["pos"][1] // 2
            if (self, port) == self.scene.selection_source:
                painter.fillRect(QRectF(pos_x - 5, pos_y - 5, 10, 10), Qt.GlobalColor.red)
            else:
                painter.fillRect(QRectF(pos_x - 5, pos_y - 5, 10, 10), Qt.GlobalColor.yellow)
            painter.fillRect(QRectF(pos_x - 2, pos_y - 2, 4, 4), Qt.GlobalColor.black)

    def mousePressEvent(self, event):
        port = self.port_selected(event.pos())
        if self.scene.selection_source == (self, port):
            self.scene.selection_source = None
        else:
            self.scene.selection_source = (self, port)

        self.update()
        QGraphicsItem.mousePressEvent(self, event)

    def mouseReleaseEvent(self, event):
        self.update()
        QGraphicsItem.mouseReleaseEvent(self, event)

    def hoverEnterEvent(self, event):
        self.scene.hover = self

    def hoverLeaveEvent(self, event):
        if self.scene.hover == self:
            self.scene.hover = None


class BreakoutNode(QGraphicsItem):
    def __init__(self, scene, breakout_setup):
        super().__init__()
        self.scene = scene
        self.breakout_setup = breakout_setup
        self.setZValue(2)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.setAcceptHoverEvents(True)
        self.name = breakout_setup["name"]
        if "rotate" not in self.breakout_setup:
            self.breakout_setup["rotate"] = 0
        breakout = breakout_setup["breakout"]
        data = open(f"riocore/breakouts/{breakout}/breakout.json", "r").read()
        self.jdata = json.loads(data)

        image = f"riocore/breakouts/{breakout}/breakout.png"
        pixmap = QPixmap.fromImage(QImage(image))
        pixmap = pixmap.transformed(QTransform().rotate(self.breakout_setup["rotate"]))
        pixmap_width = pixmap.width()
        pixmap_height = pixmap.height()
        self.width = pixmap_width // 2
        self.height = pixmap_height // 2
        self.pixmap = pixmap.scaled(self.width, self.height, Qt.KeepAspectRatio, Qt.SmoothTransformation)

        self.ports = {}
        for pin_name, pin_data in self.jdata["main"].items():
            pos = pin_data.get("pos")
            if self.breakout_setup["rotate"] == 90:
                pos = [pixmap_width - pos[1], pos[0]]
            elif self.breakout_setup["rotate"] == -90:
                pos = [pos[1], pixmap_height - pos[0]]
            elif self.breakout_setup["rotate"] == 180:
                pos = [pixmap_width - pos[0], pixmap_height - pos[1]]
            self.ports[pin_name] = pin_data
            self.ports[pin_name]["pos"] = pos

        for slot in self.jdata["slots"]:
            slot_name = slot["name"]
            for pin_name, pin_data in slot["pins"].items():
                print(pin_data)
                pos = pin_data.get("pos") or slot.get("pos")
                if self.breakout_setup["rotate"] == 90:
                    pos = [pixmap_width - pos[1], pos[0]]
                elif self.breakout_setup["rotate"] == -90:
                    pos = [pos[1], pixmap_height - pos[0]]
                elif self.breakout_setup["rotate"] == 180:
                    pos = [pixmap_width - pos[0], pixmap_height - pos[1]]
                self.ports[f"{slot_name}:{pin_name}"] = pin_data
                self.ports[f"{slot_name}:{pin_name}"]["pos"] = pos
        self.selected_port = None

    def port_index(self, port):
        return 0

    def rotate_cw(self):
        if self.breakout_setup["rotate"] < 180:
            self.breakout_setup["rotate"] += 90
        else:
            self.breakout_setup["rotate"] = -90
        self.scene.parent.redraw()
        self.scene.parent.snapshot()

    def boundingRect(self):
        return QRectF(0, 0, self.width, self.height)

    def port_info(self, port):
        pin_data = self.ports.get(port)
        if pin_data:
            return f"{pin_data.get('pin', '')} {pin_data.get('comment', '')}"
        return ""

    def port_pos(self, port):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        if port in self.ports and self.ports[port]["pos"]:
            pos_x += self.ports[port]["pos"][0] // 2
            pos_y += self.ports[port]["pos"][1] // 2
        return QPointF(pos_x, pos_y)

    def port_selected(self, mouse_pos):
        mouse_x = mouse_pos.x()
        mouse_y = mouse_pos.y()
        for port in self.ports:
            if not self.ports[port]["pos"]:
                continue
            x = self.ports[port]["pos"][0] // 2
            y = self.ports[port]["pos"][1] // 2
            if abs(mouse_x - x) < 5 and abs(mouse_y - y) < 5:
                return port
        return None

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.breakout_setup["pos"] = (pos_x, pos_y)

        painter.drawRect(self.boundingRect())
        painter.drawPixmap(0, 0, self.pixmap)
        for port in self.ports:
            if not self.ports[port]["pos"]:
                continue
            pos_x = self.ports[port]["pos"][0] // 2
            pos_y = self.ports[port]["pos"][1] // 2
            if (self, port) == self.scene.selection_source:
                painter.fillRect(QRectF(pos_x - 5, pos_y - 5, 10, 10), Qt.GlobalColor.red)
            else:
                painter.fillRect(QRectF(pos_x - 5, pos_y - 5, 10, 10), Qt.GlobalColor.yellow)
            painter.fillRect(QRectF(pos_x - 2, pos_y - 2, 4, 4), Qt.GlobalColor.black)

    def mousePressEvent(self, event):
        port = self.port_selected(event.pos())
        if port in self.jdata["main"]:
            if self.scene.selection_target == (self, port):
                self.scene.selection_target = None
            else:
                self.scene.selection_target = (self, port)
        else:
            if self.scene.selection_source == (self, port):
                self.scene.selection_source = None
            else:
                self.scene.selection_source = (self, port)

        self.update()
        QGraphicsItem.mousePressEvent(self, event)

    def mouseReleaseEvent(self, event):
        self.update()
        QGraphicsItem.mouseReleaseEvent(self, event)

    def hoverEnterEvent(self, event):
        self.scene.hover = self

    def hoverLeaveEvent(self, event):
        if self.scene.hover == self:
            self.scene.hover = None


class PluginNode(MyNode):
    show_signals = True
    border_color = QColor(150, 250, 150)

    def __init__(self, scene, plugin_instance):
        super().__init__(scene)
        plugin_config = plugin_instance.plugin_setup
        self.plugin_instance = plugin_instance
        self.name = plugin_config["uid"]
        self.pins = plugin_instance.PINDEFAULTS
        self.signals = plugin_instance.SIGNALS
        self.width = 180

        self.setZValue(9)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.selected_port = None

        self.ports_left = self.pins
        self.ports_right = {}
        for key, value in self.signals.items():
            self.ports_right[f"sig_{key}"] = value
        self.height = self.port_top + max(len(self.ports_left), len(self.ports_right)) * self.port_diff + self.port_bottom
        """
        image = f"riocore/plugins/{plugin_config['type']}/image.png"
        pixmap = QPixmap.fromImage(QImage(image))
        pixmap = pixmap.transformed(QTransform().rotate(plugin_config.get("rotate", 0)))
        pixmap_width = pixmap.width()
        pixmap_height = pixmap.height()
        self.width = pixmap_width // 2
        self.height = pixmap_height // 2
        self.pixmap = pixmap.scaled(self.width, self.height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        """

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        info = self.plugin_instance.cfg_info()
        self.plugin_instance.plugin_setup["pos"] = (pos_x, pos_y)
        self.paintBg(painter, self.name, info=info)
        if hasattr(self, "pixmap"):
            # painter.drawRect(self.boundingRect())
            # painter.drawPixmap(0, 0, self.pixmap)
            width = self.pixmap.width()
            height = self.pixmap.height()
            xoff = (30 - width) // 2 + 5
            yoff = (30 - height) // 2 + 5
            painter.drawPixmap(self.width - width - xoff, yoff, self.pixmap)

        painter.setPen(QPen(Qt.GlobalColor.black, 1))
        self.paintPorts(painter)

    def mouseDoubleClickEvent(self, event):
        self.scene.parent.gui_plugins.edit_plugin(self.plugin_instance, None)
        self.scene.parent.redraw()
        self.scene.parent.snapshot()

    def mouseReleaseEvent(self, event):
        self.update()
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.plugin_instance.plugin_setup["pos"] = (pos_x, pos_y)
        QGraphicsItem.mouseReleaseEvent(self, event)


class ModuleNode(MyNode):
    border_color = QColor(150, 250, 150)

    def __init__(self, scene, module_config, sysconfig):
        super().__init__(scene)
        self.sysconfig = sysconfig
        self.module_config = module_config
        self.module_name = self.module_config["module"]
        self.module_setup = self.module_config["setup"]
        self.module_path = self.scene.parent.get_path(os.path.join("modules", self.module_name, "module.json"))
        self.module_image = self.scene.parent.get_path(os.path.join("modules", self.module_name, "module.png"))
        moduleJsonStr = open(self.module_path, "r").read()
        self.module_defaults = json.loads(moduleJsonStr)
        self.plugin_uids = []

        self.plugins = riocore.Plugins()
        for plugin_id, plugin_config in enumerate(self.module_defaults.get("plugins", [])):
            uid = plugin_config.get("uid")
            if not uid:
                uid_prefix = plugin_config["type"]
                unum = 0
                while f"{uid_prefix}{unum}" in self.plugin_uids:
                    unum += 1
                uid = f"{uid_prefix}{unum}"
                plugin_config["uid"] = uid
            self.plugin_uids.append(uid)
            self.plugins.load_plugin(plugin_id, plugin_config, self.sysconfig)

        self.name = self.module_name
        self.slot = self.module_config["slot"]
        self.pins = {}
        self.port_positions = {}
        self.signals = {}
        self.width = 250
        self.height = 50
        self.setZValue(9)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        # self.pixmap = QPixmap.fromImage(QImage(self.module_image)).scaled(30, 30, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.selected_port = None
        self.paintPlugins()

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.module_config["pos"] = (pos_x, pos_y)
        self.paintBg(painter, self.name)
        painter.setPen(QPen(Qt.GlobalColor.black, 1))
        self.paintPlugins(painter)

    def boundingRect(self):
        return QRectF(0, 0, self.width, self.height)

    def port_pos(self, port):
        pos = self.pos()
        ppos = self.port_positions.get(port, (0, 0))
        pos_x = pos.x() + ppos[0]
        pos_y = pos.y() + ppos[1]
        return QPointF(pos_x, pos_y)

    def paintPlugins(self, painter=None):
        py = self.port_top
        if painter:
            painter.setPen(QPen(self.text_color, 1))
            painter.setFont(QFont(self.text_font, self.port_tsize))

        for plugin_instance in self.plugins.plugin_instances:
            plugin_name = plugin_instance.instances_name
            if painter:
                plugin_title = plugin_instance.plugin_setup.get("name") or plugin_name
                painter.drawText(
                    QRectF(0, py - (self.port_tsize * self.text_scale / 2) - self.port_toff_y, self.width, self.port_tsize * self.text_scale),
                    Qt.AlignmentFlag.AlignCenter,
                    plugin_title,
                )
            pph = 0
            for pin_name, pin_data in plugin_instance.pins().items():
                pin = pin_data.get("pin")
                if pin:
                    if painter:
                        self.paintPort(painter, "left", py + pph, f"{pin}({pin_name})", Qt.GlobalColor.yellow)
                    self.port_positions[pin] = (0, py + pph)
                    pph += self.port_diff

            sph = 0
            for signal_name, signal_data in plugin_instance.SIGNALS.items():
                key = f"sig_{plugin_name}:{signal_name}"
                if painter:
                    self.paintPort(painter, "right", py + sph, signal_name, Qt.GlobalColor.yellow)
                self.port_positions[key] = (self.width, py + sph)
                sph += self.port_diff

            py += max(pph, sph)
            self.height = self.port_top + py + self.port_bottom

    def mouseDoubleClickEvent(self, event):
        # self.scene.parent.gui_plugins.edit_plugin(self.plugin_instance, None)
        self.scene.parent.redraw()
        self.scene.parent.snapshot()

    def mouseReleaseEvent(self, event):
        self.update()
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.module_config["pos"] = (pos_x, pos_y)
        QGraphicsItem.mouseReleaseEvent(self, event)


class HalNode(MyNode):
    border_color = QColor(150, 150, 200)

    def __init__(self, scene, name):
        super().__init__(scene)
        self.name = name
        self.width = 450
        self.setZValue(9)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)

    def add_signal(self, pin, signal):
        self.ports_left[pin] = signal
        self.height = self.port_top + len(self.ports_left) * self.port_diff + self.port_bottom

    def paintPorts(self, painter):
        self.height = self.port_top + max(len(self.ports_left), len(self.ports_right)) * self.port_diff + self.port_bottom
        py = self.port_top
        for port, data in self.ports_left.items():
            title = data.get("target") or port
            if data.get("type") == "setp":
                title = f"setp: {title}"
            color = Qt.GlobalColor.yellow
            if (self, port) == self.scene.selection_target:
                color = Qt.GlobalColor.red
            self.paintPort(painter, "left", py, title, color)
            py += self.port_diff

    def paint(self, painter, option, widget):
        self.paintBg(painter, self.name)
        painter.setPen(QPen(Qt.GlobalColor.black, 1))
        self.paintPorts(painter)

    def mouseReleaseEvent(self, event):
        self.update()
        QGraphicsItem.mouseReleaseEvent(self, event)


class ModifierNode(MyNode):
    port_top = 13
    port_bottom = 2

    def __init__(self, scene, modifier):
        super().__init__(scene)
        self.modifier = modifier
        self.name = modifier["type"]
        self.width = 100
        self.height = 20
        self.setZValue(9)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.selected_port = None
        self.ports_left = {"in": {"title": " "}}
        self.ports_right = {"out": {"title": " "}}

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.modifier["pos"] = (pos_x, pos_y)
        self.paintBg(painter, self.name)
        painter.setPen(QPen(Qt.GlobalColor.black, 1))
        self.paintPorts(painter)

    def mouseDoubleClickEvent(self, event):
        target = self.scene.parent.get_next(self, "out")
        while isinstance(target[0], ModifierNode):
            target = self.scene.parent.get_next(target[0], "out")
        if isinstance(target[0], PluginNode):
            plugin_instance = target[0].plugin_instance
            port = target[1]
            modifier_id = -1
            modifier_list = plugin_instance.plugin_setup["pins"][port]["modifier"]
            for mid, modifier in enumerate(modifier_list):
                if modifier == self.modifier:
                    modifier_id = mid
                    break
            if modifier_id != -1:
                self.scene.parent.gui_modifiers.edit_modifier(modifier_list, modifier_id)
                self.scene.parent.redraw()
                self.scene.parent.snapshot()

    def mousePressEvent(self, event):
        if self.port_selected(event.pos()) == "in":
            if self.scene.selection_target == (self, self.port_selected(event.pos())):
                self.scene.selection_target = None
            else:
                self.scene.selection_target = (self, self.port_selected(event.pos()))
        else:
            if self.scene.selection_source == (self, self.port_selected(event.pos())):
                self.scene.selection_source = None
            else:
                self.scene.selection_source = (self, self.port_selected(event.pos()))

        self.update()
        QGraphicsItem.mousePressEvent(self, event)

    def mouseReleaseEvent(self, event):
        self.update()
        QGraphicsItem.mouseReleaseEvent(self, event)


class LogicNode(MyNode):
    def __init__(self, scene, logic):
        super().__init__(scene)
        self.logic = logic
        self.name = logic["type"]
        self.type = logic["type"]
        self.width = 100
        self.height = 20
        self.setZValue(9)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable)
        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable)
        self.selected_port = None
        self.ports_left = {}
        self.ports_right = {}
        if self.type == "not":
            self.ports_left["in"] = {}
            self.ports_right["out"] = {}
        else:
            for num in range(4):
                self.ports_left[f"in-{num:02d}"] = {}
            self.ports_right = {self.type: {}}

    def paint(self, painter, option, widget):
        pos = self.pos()
        pos_x = pos.x()
        pos_y = pos.y()
        self.logic["pos"] = (pos_x, pos_y)
        self.paintBg(painter, self.name)
        painter.setPen(QPen(Qt.GlobalColor.black, 1))
        self.paintPorts(painter)

    def mousePressEvent(self, event):
        if self.port_selected(event.pos()) == "in":
            if self.scene.selection_target == (self, self.port_selected(event.pos())):
                self.scene.selection_target = None
            else:
                self.scene.selection_target = (self, self.port_selected(event.pos()))
        else:
            if self.scene.selection_source == (self, self.port_selected(event.pos())):
                self.scene.selection_source = None
            else:
                self.scene.selection_source = (self, self.port_selected(event.pos()))

        self.update()
        QGraphicsItem.mousePressEvent(self, event)

    def mouseReleaseEvent(self, event):
        self.update()
        QGraphicsItem.mouseReleaseEvent(self, event)


class NodeViewer(QGraphicsView):
    def __init__(self, scene):
        super().__init__()
        self.scene = scene
        self.setScene(self.scene)
        self.setRenderHint(QPainter.RenderHint.Antialiasing)
        self.setTransformationAnchor(self.ViewportAnchor.AnchorUnderMouse)
        self.button_pressed = 0
        self.mouse_pos = QPoint()
        self.scene.insert_position = None

    def getZoom(self):
        transform = self.transform()
        return transform.m11()

    def setZoom(self, zoomFactor):
        transform = self.transform()
        transform.reset()
        transform.scale(zoomFactor, zoomFactor)
        self.setTransform(transform)

    def mouseDoubleClickEvent(self, event):
        if self.scene.hover:
            super().mouseDoubleClickEvent(event)
        elif self.scene.edge_hover:
            super().mouseDoubleClickEvent(event)
        else:
            self.scene.parent.gui_plugins.add_plugin("")

    def mousePressEvent(self, event: QMouseEvent) -> None:
        self.mouse_pos = event.pos()
        self.button_pressed = event.button()
        self.scene.insert_position = self.mapToScene(self.mouse_pos.x(), self.mouse_pos.y())
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event: QMouseEvent) -> None:
        if self.scene.selection_source and self.scene.selection_target:
            source_node = self.scene.selection_source[0]
            source_port = self.scene.selection_source[1]
            target_node = self.scene.selection_target[0]
            target_port = self.scene.selection_target[1]
            if source_node and source_port and target_node and target_port:
                if source_node != target_node:
                    if isinstance(target_node, BreakoutNode) and ":" in source_port:
                        breakout_name = target_node.name
                        slot = source_port.split(":")[0]
                        # remove all old wires
                        for subitem in self.scene.items():
                            if isinstance(subitem, NodeEdge):
                                if subitem.etype == f"breakout:{breakout_name}":
                                    self.scene.removeItem(subitem)
                        # connect all main wires
                        for pin, pin_data in target_node.jdata["main"].items():
                            bpin = f"{slot}:{pin}"
                            edge = NodeEdge(self.scene, f"breakout:{breakout_name}", source_node, bpin, target_node, pin, color=colors[-1])
                            self.scene.addItem(edge)
                        target_node.breakout_setup["slot"] = slot

                    else:
                        # remove old edges
                        self.scene.disconnect_port(source_node, source_port)
                        self.scene.disconnect_port(target_node, target_port)
                        # add new edge
                        color_idx = target_node.port_index(target_port)
                        color = Qt.GlobalColor.green
                        if color_idx >= 0 and color_idx < len(colors):
                            color = colors[color_idx]
                        edge = NodeEdge(self.scene, "", source_node, source_port, target_node, target_port, color=color)
                        self.scene.addItem(edge)

                # clear selection
                self.scene.selection_source = (None, None)
                self.scene.selection_target = (None, None)

            self.scene.parent.update_halpins_from_edges()

        self.mouse_pos = event.pos()
        self.button_pressed = 0

        # update config
        self.scene.parent.config["flow"]["view"]["scale"] = self.getZoom()
        self.scene.parent.config["flow"]["view"]["pos"] = (self.horizontalScrollBar().value(), self.verticalScrollBar().value())
        self.scene.parent.snapshot()

        super().mouseReleaseEvent(event)

    def mouseMoveEvent(self, event: QMouseEvent) -> None:
        if self.button_pressed in [Qt.LeftButton, Qt.MiddleButton]:
            if not self.scene.selectedItems() or self.button_pressed == Qt.MiddleButton:
                offset = self.mouse_pos - event.pos()
                self.mouse_pos = event.pos()
                dx, dy = offset.x(), offset.y()
                self.horizontalScrollBar().setValue(int(self.horizontalScrollBar().value() + dx))
                self.verticalScrollBar().setValue(int(self.verticalScrollBar().value() + dy))

        else:
            if self.scene.hover:
                position = QPoint(event.pos())
                position = self.mapToScene(position.x(), position.y())
                hovername = self.scene.hover.name
                hoverpos = self.scene.hover.pos()
                position = QPointF(position.x() - hoverpos.x(), position.y() - hoverpos.y())
                port = self.scene.hover.port_selected(position)
                if port:
                    pinfo = self.scene.hover.port_info(port)
                    self.scene.parent.info.setText(f"{hovername} - {port} ({pinfo})")
                else:
                    self.scene.parent.info.setText(hovername)
            else:
                self.scene.parent.info.setText("")

        super().mouseMoveEvent(event)

    def wheelEvent(self, event):
        angle = event.angleDelta().y()
        zoomFactor = 1 + (angle / 1000)
        self.scale(zoomFactor, zoomFactor)
        self.scene.parent.config["flow"]["view"]["scale"] = zoomFactor


class NodeScene(QGraphicsScene):
    def __init__(self, x, y, w, h, parent):
        super().__init__(x, y, w, h)
        self.parent = parent
        self.selection_source = (None, None)
        self.selection_target = (None, None)
        self.hover = None
        self.edge_hover = None
        self.menu_selection = None

    def delete(self):
        if not self.menu_selection:
            return

        item = self.menu_selection
        if isinstance(item, BoardNode):
            return
        if isinstance(item, BreakoutNode):
            return

        elif isinstance(item, ModifierNode):
            source = self.parent.get_next(item, "in")
            target = self.parent.get_next(item, "out")
            if source and target:
                # reconnect source and target
                edge = NodeEdge(self, "pin", source[0], source[1], target[0], target[1], color=target[2].color)
                self.addItem(edge)
            self.disconnect_node(item)

        elif isinstance(item, ModuleNode):
            self.disconnect_node(item)

        elif isinstance(item, PluginNode):
            self.disconnect_node(item)
            # remove plugin from cfg
            plugin_instance = item.plugin_instance
            plugin_config = plugin_instance.plugin_setup
            for pn, plugin in enumerate(self.parent.config["plugins"]):
                if plugin == plugin_config:
                    self.parent.config["plugins"].pop(pn)
        self.removeItem(item)
        self.parent.snapshot()

    def contextMenuEvent(self, event):
        self.menu_selection = None
        menu = QMenu()

        if self.hover:
            self.menu_selection = self.hover
            delete = QAction("delete", None)
            delete.triggered.connect(self.delete)
            menu.addAction(delete)
            # print(self.menu_selection)
            if isinstance(self.menu_selection, BoardNode) or isinstance(self.menu_selection, BreakoutNode):
                rotate = QAction("rotate", None)
                rotate.triggered.connect(self.menu_selection.rotate_cw)
                menu.addAction(rotate)

        elif self.edge_hover:
            self.menu_selection = self.edge_hover
            delete = QAction("delete", None)
            delete.triggered.connect(self.delete)
            menu.addAction(delete)

        else:
            pass

        add_plugin = QAction("add Plugin", None)
        add_plugin.triggered.connect(self.parent.gui_plugins.add_plugin)
        menu.addAction(add_plugin)

        add_breakout = QAction("add Breakout", None)
        add_breakout.triggered.connect(self.parent.gui_breakouts.add_breakout)
        menu.addAction(add_breakout)

        menu.exec_(event.screenPos())

    def disconnect_port(self, node, port):
        for item in self.items():
            if isinstance(item, NodeEdge):
                if item._target_node == node and item._target_port == port:
                    self.removeItem(item)
                elif item._source_node == node and item._source_port == port:
                    self.removeItem(item)

    def disconnect_node(self, node):
        for item in self.items():
            if isinstance(item, NodeEdge):
                if item._target_node == node:
                    self.removeItem(item)
                elif item._source_node == node:
                    self.removeItem(item)

    def drawBackground(self, painter, rect):
        super().drawBackground(painter, rect)

        left, right = floor(rect.left()), ceil(rect.right())
        top, bottom = floor(rect.top()), ceil(rect.bottom())

        grid_points = []
        for x in range(left - (left % grid_size), right, grid_size):
            for y in range(top - (top % grid_size), bottom, grid_size):
                grid_points.append(QPoint(x, y))

        if len(grid_points) > 0:
            pen = QPen(grid_color)
            pen.setWidthF(1)
            painter.setPen(pen)

            painter.drawPoints(grid_points)


class Window(QWidget):
    def __init__(self):
        self.HAS_INVERTS = {"rio": "-not"}
        self.logic_ids = {}
        self.hal_logics = {}
        self.hal_calcs = {}
        self.outputs2signals = {}
        self.signals_out = {}
        self.function_cache = {}

        super().__init__()
        self.scene = NodeScene(-1500, -1500, 5000, 5000, self)
        self.scene.setBackgroundBrush(QColor("#262626"))
        self.filename = sys.argv[1]
        self.snapshots = []
        self.halpins = {}
        self.joints = 0
        self.board = {}

        self.cfggraph = cfggraph()

        self.gui_plugins = GuiPlugins(self)
        self.gui_breakouts = GuiBreakouts(self)
        self.gui_modifiers = GuiModifiers(self)

        vbox = QVBoxLayout()

        grid = QPushButton("Grid")
        grid.clicked.connect(self.grid_align)
        vbox.addWidget(grid)

        edit = QPushButton("Edit")
        edit.clicked.connect(self.edit_selection)
        vbox.addWidget(edit)

        add_plugin = QPushButton("add Plugin")
        add_plugin.clicked.connect(self.gui_plugins.add_plugin)
        vbox.addWidget(add_plugin)

        add_modifier = QPushButton("add Modifier")
        add_modifier.clicked.connect(self.add_modifier)
        vbox.addWidget(add_modifier)

        delete = QPushButton("Delete")
        delete.clicked.connect(self.delete_selection)
        vbox.addWidget(delete)

        redraw = QPushButton("Redraw")
        redraw.clicked.connect(self.redraw)
        vbox.addWidget(redraw)

        cfg_reload = QPushButton("Reload")
        cfg_reload.clicked.connect(self.cfg_reload)
        vbox.addWidget(cfg_reload)

        undo = QPushButton("Undo")
        undo.clicked.connect(self.undo)
        vbox.addWidget(undo)

        save = QPushButton("Save")
        save.clicked.connect(self.json_save)
        vbox.addWidget(save)

        vbox.addStretch()

        self.view = NodeViewer(self.scene)

        hbox = QHBoxLayout()
        hbox.addLayout(vbox)
        hbox.addWidget(self.view)

        vboxMain = QVBoxLayout(self)
        self.info = QLabel("---")
        vboxMain.addLayout(hbox)
        vboxMain.addWidget(self.info)

        self.setLayout(vboxMain)

        self.show()
        self.cfg_reload()
        self.snapshot()

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
        elif event.key() == Qt.Key_Delete:
            self.delete_selection()
        elif event.key() == Qt.Key_Backspace:
            self.undo()

    def cfg_reload(self, widget=None, config=None):
        if config is None:
            jdata = open(self.filename, "r").read()
            self.config = json.loads(jdata)
        else:
            self.config = config
        if "flow" not in self.config:
            self.config["flow"] = {}
        if "view" not in self.config["flow"]:
            self.config["flow"]["view"] = {}
        if "hal" not in self.config["flow"]:
            self.config["flow"]["hal"] = {}
        self.redraw()

    def rotate(self, item):
        self.cfg_save()
        if not self.snapshots or self.config != self.snapshots[-1]:
            self.snapshots.append(copy.deepcopy(self.config))

    def snapshot(self):
        self.cfg_save()
        if not self.snapshots or self.config != self.snapshots[-1]:
            self.snapshots.append(copy.deepcopy(self.config))

    def undo(self):
        if len(self.snapshots) > 1:
            self.snapshots.pop()
        self.cfg_reload(config=copy.deepcopy(self.snapshots[-1]))

    def json_save(self):
        self.cfg_save()
        jdata = json.dumps(self.config, indent=4)
        open(self.filename, "w").write(jdata)

    def update_halpins_from_edges(self):
        for item in self.scene.items():
            if isinstance(item, PluginNode):
                plugin_config = item.plugin_instance.plugin_setup
                for signal_name, signal_data in plugin_config.get("signals", {}).items():
                    signal_data["net"] = ""
                    signal_data["setp"] = ""

        for item in self.scene.items():
            if isinstance(item, NodeEdge):
                # if isinstance(item._target_node, HalNode) and item._source_port.startswith("sig_"):
                if isinstance(item._source_node, PluginNode) and item._source_port.startswith("sig_"):
                    source_port = item._source_port[4:]
                    # save to plugin setup
                    plugin_config = item._source_node.plugin_instance.plugin_setup
                    if item._target_port in item._target_node.ports_left:
                        hinfo = item._target_node.ports_left[item._target_port]
                        if hinfo["type"] == "net":
                            if "signals" not in plugin_config:
                                plugin_config["signals"] = {}
                            if source_port not in plugin_config["signals"]:
                                plugin_config["signals"][source_port] = {}
                            plugin_config["signals"][source_port]["net"] = item._target_port
                        elif hinfo["type"] == "setp":
                            plugin_config["signals"][source_port]["setp"] = item._target_port

    def cfg_save(self):
        for item in self.scene.items():
            if isinstance(item, BoardNode):
                pass
            elif isinstance(item, HalNode):
                pos = item.pos()
                pos_x = pos.x()
                pos_y = pos.y()
                self.config["flow"]["hal"][item.name] = (pos_x, pos_y)

            elif isinstance(item, PluginNode):
                plugin_instance = item.plugin_instance
                plugin_config = plugin_instance.plugin_setup
                for port, pin_data in plugin_instance.PINDEFAULTS.items():
                    if "pins" not in plugin_config:
                        plugin_config["pins"] = {}
                    if port not in plugin_config["pins"]:
                        plugin_config["pins"][port] = {}

                    modifiers = []
                    source = self.get_source(item, port, modifiers)
                    if source:
                        if isinstance(source[0], BreakoutNode):
                            plugin_config["pins"][port]["pin"] = f"{source[0].name}:{source[1]}"
                        else:
                            plugin_config["pins"][port]["pin"] = source[1]
                        if modifiers:
                            plugin_config["pins"][port]["modifier"] = list(reversed(modifiers))
                    else:
                        if plugin_config.get("pins") and port in plugin_config["pins"]:
                            del plugin_config["pins"][port]

    def display(self):
        self.redraw()

    def pin_not(self, input_pin, target):
        component = input_pin.split(".", 1)[0]
        if component in self.HAS_INVERTS:
            return f"{input_pin}{self.HAS_INVERTS[component]}"

        if input_pin in self.HAS_INVERTS:
            return f"{input_pin}{self.HAS_INVERTS[input_pin]}"

        if target not in self.logic_ids:
            self.logic_ids[target] = 0
        self.logic_ids[target] += 1
        fname = f"func.not_{input_pin.replace('.', '_')}"
        if fname in self.function_cache:
            return self.function_cache[fname]

        if "not" not in self.hal_calcs:
            self.hal_calcs["not"] = []
        self.hal_calcs["not"].append(fname)

        input_signal = self.pin2signal(input_pin, target)
        self.outputs2signals[f"{fname}.in"] = {"signals": [input_signal], "target": target}

        self.function_cache[fname] = f"{fname}.out"

        return f"{fname}.out"

    def pin2signal(self, pin, target, signal_name=None):
        return pin

    def logic2signal(self, expression, target):
        logic_types = {"AND": 0x100, "OR": 0x200, "XOR": 0x400, "NAND": 0x800, "NOR": 0x1000}
        int_types = {"S+": "scaled_s32_sums", "+": "sum2", "-": "sum2", "*": "mult2", "/": "div2"}

        if expression in self.function_cache:
            return self.function_cache[expression]

        if target not in self.logic_ids:
            self.logic_ids[target] = 0
        self.logic_ids[target] += 1
        logic_num = list(self.logic_ids).index(target)
        new_signal = f"{logic_num}.{self.logic_ids[target]}"
        parts = expression.split()
        n_inputs = (len(parts) + 1) // 2
        etype = parts[1].upper()

        if etype in logic_types:
            personality = logic_types[etype] + n_inputs
            fname = f"func.{etype.lower()}_{new_signal}"
            self.hal_logics[fname] = f"0x{personality:x}"
            for in_n in range(n_inputs):
                input_pin = parts[in_n * 2]
                if input_pin.replace(".", "").lstrip("-").isnumeric():
                    self.setp_add(f"{fname}.in-{in_n:02d}", input_pin)
                    continue
                if input_pin[0] == "!":
                    input_pin = self.pin_not(input_pin[1:], target)
                input_signal = self.pin2signal(input_pin, target)
                if f"{fname}.in-{in_n:02d}" not in self.outputs2signals:
                    self.outputs2signals[f"{fname}.in-{in_n:02d}"] = {"signals": [input_signal], "target": target}
                else:
                    self.outputs2signals[f"{fname}.in-{in_n:02d}"]["signals"].append(input_signal)
            output_pin = f"{fname}.{etype.lower()}"
        else:
            personality = int_types[etype]
            if etype == "-":
                fname = f"func.sub2_{new_signal}"
            else:
                fname = f"func.{int_types[etype]}_{new_signal}"
            if personality not in self.hal_calcs:
                self.hal_calcs[personality] = []
            self.hal_calcs[personality].append(fname)
            for in_n in range(n_inputs):
                input_pin = parts[in_n * 2]
                if input_pin.replace(".", "").lstrip("-").isnumeric():
                    self.setp_add(f"{fname}.in{in_n}", input_pin)
                    continue
                input_signal = self.pin2signal(input_pin, target)
                if f"{fname}.in{in_n}" not in self.outputs2signals:
                    self.outputs2signals[f"{fname}.in{in_n}"] = {"signals": [input_signal], "target": target}
                else:
                    self.outputs2signals[f"{fname}.in{in_n}"]["signals"].append(input_signal)

                if etype == "-" and in_n == 1:
                    self.outputs2signals[f"{fname}.gain{in_n}"] = {"signals": -1, "target": target}

            if etype.upper() == "S+":
                output_pin = f"{fname}.out-s"
            else:
                output_pin = f"{fname}.out"

        self.function_cache[expression] = output_pin
        return output_pin

    def text_in_bracket(self, text, right):
        chars = []
        for c in reversed(text[:right]):
            if c != "(":
                chars.append(c)
            else:
                chars.append(c)
                break
        return "".join(reversed(chars))

    def brackets_parser(self, input_pin, output_pin):
        expression = "#"
        while expression:
            expression = ""
            for n, c in enumerate(input_pin):
                if c == ")":
                    expression = self.text_in_bracket(input_pin, n + 1)
                    inside = expression.lstrip("(").rstrip(")")
                    if " " in inside:
                        new_pin = self.logic2signal(inside, output_pin)
                        input_pin = input_pin.replace(expression, new_pin)
                    else:
                        if inside[0] == "!":
                            target = output_pin
                            inside = self.pin_not(inside[1:], target)
                        elif inside.startswith("abs'"):
                            target = output_pin
                            inside = self.pin_abs(inside[4:], target)
                        input_pin = input_pin.replace(expression, inside)
                    break
        return input_pin

    def get_path(self, path):
        if os.path.exists(path):
            return path
        elif os.path.exists(os.path.join(riocore_path, path)):
            return os.path.join(riocore_path, path)
        print(f"can not find path: {path}")
        exit(1)

    def redraw(self):
        # cleanup
        self.halpins = {}
        self.joints = 0
        for item in self.scene.items():
            self.scene.removeItem(item)
        self.pinlist = []
        boardcfg = self.config.get("boardcfg")
        if "board" not in self.config["flow"]:
            self.config["flow"]["board"] = {}
        if "pos" not in self.config["flow"]["board"]:
            self.config["flow"]["board"]["pos"] = (120, 220)
        if "rotate" not in self.config["flow"]["board"]:
            self.config["flow"]["board"]["rotate"] = 0
        self.bnode = None
        board_setup = {"board": boardcfg, "config": self.config}
        if os.path.exists(f"riocore/boards/{boardcfg}/board.json"):
            self.bnode = BoardNode(self.scene, board_setup)
            self.bnode.setPos(self.config["flow"]["board"]["pos"][0], self.config["flow"]["board"]["pos"][1])
            self.scene.addItem(self.bnode)
            self.board = self.bnode.jdata

        if "gpios" in self.config:
            pass

        py = 100
        if "plugins" not in self.config:
            self.config["plugins"] = []
        if "modules" not in self.config:
            self.config["modules"] = []
        if "breakouts" not in self.config:
            self.config["breakouts"] = []

        # loading breakouts
        self.breakout_uids = []
        for breakout_id, breakout_config in enumerate(self.config.get("breakouts", [])):
            py += self.insert_breakout(breakout_config, py)

        # loading modules
        for module_id, module_config in enumerate(self.config.get("modules", [])):
            if "setup" not in module_config:
                self.config["modules"][module_id]["setup"] = {}
            py += self.insert_module(module_config, py)

        # loading plugins
        self.plugin_uids = []
        self.plugins = riocore.Plugins()
        for plugin_id, plugin_config in enumerate(self.config.get("plugins", [])):
            uid = plugin_config.get("uid")
            if not uid:
                uid_prefix = plugin_config["type"]
                unum = 0
                while f"{uid_prefix}{unum}" in self.plugin_uids:
                    unum += 1
                uid = f"{uid_prefix}{unum}"
                plugin_config["uid"] = uid
            self.plugin_uids.append(uid)
            self.plugins.load_plugin(plugin_id, plugin_config, self.config)
            plugin_instance = self.plugins.plugin_instances[-1]
            py += self.insert_plugin(plugin_instance, py)

        hnodes = {}
        for signal_name, signal in self.halpins.items():
            source = signal["source"]
            target = signal["target"]
            tsplit = target.split(".")
            group = tsplit[0]

            if source is None:
                group = "unused"
            elif group in {"joint", "spindle"}:
                group = ".".join(tsplit[0:2])
            else:
                group = "misc"

            if source and target:
                if group not in hnodes:
                    hnodes[group] = HalNode(self.scene, group)
                    self.scene.addItem(hnodes[group])
                hnodes[group].add_signal(target, signal)
                spin = f"sig_{source[1]}"
                edge = NodeEdge(self.scene, "hal", source[0], spin, hnodes[group], signal["target"], color=colors[0])
                self.scene.addItem(edge)

        hnodes_y = 100
        for group in hnodes:
            pos = self.config["flow"]["hal"].get(group)
            if pos:
                hnodes[group].setPos(pos[0], pos[1])
            else:
                hnodes[group].setPos(1100, hnodes_y)
            hnodes_y += hnodes[group].height + 10

        ph = 1
        pv = 1
        zoom = 1.0
        if "pos" in self.config["flow"]["view"]:
            ph = self.config["flow"]["view"]["pos"][0]
            pv = self.config["flow"]["view"]["pos"][1]
        if "scale" in self.config["flow"]["view"]:
            zoom = self.config["flow"]["view"]["scale"]
        self.view.setZoom(zoom)
        self.view.horizontalScrollBar().setSliderPosition(ph)
        self.view.verticalScrollBar().setSliderPosition(pv)

    def grid_align(self):
        for item in self.scene.items():
            if not isinstance(item, NodeEdge):
                px = item.pos().x()
                py = item.pos().y()
                px = (px + grid_size / 2) // grid_size * grid_size
                py = (py + grid_size / 2) // grid_size * grid_size
                item.setPos(px, py)
        self.snapshot()

    def insert_breakout(self, breakout_config, py=100):
        mnode = BreakoutNode(self.scene, breakout_config)
        slot = breakout_config["slot"]
        breakout_name = breakout_config["name"]
        self.breakout_uids.append(breakout_name)
        if "pos" in breakout_config:
            hx = breakout_config["pos"][0]
            hy = breakout_config["pos"][1]
        elif self.scene.insert_position is not None:
            hx = self.scene.insert_position.x()
            hy = self.scene.insert_position.y()
            self.scene.insert_position = None
        else:
            hx = 850
            hy = py
        mnode.setPos(hx, hy)
        if slot:
            for pin, pin_data in mnode.jdata["main"].items():
                bpin = f"{slot}:{pin}"
                edge = NodeEdge(self.scene, f"breakout:{breakout_name}", self.bnode, bpin, mnode, pin, color=colors[-1])
                self.scene.addItem(edge)

        self.scene.addItem(mnode)
        return hy

    def insert_module(self, module_config, py=100):
        mnode = ModuleNode(self.scene, module_config, self.config)
        slot = module_config["slot"]

        if "pos" in module_config:
            hx = module_config["pos"][0]
            hy = module_config["pos"][1]
        elif self.scene.insert_position is not None:
            hx = self.scene.insert_position.x()
            hy = self.scene.insert_position.y()
            self.scene.insert_position = None
        else:
            hx = 850
            hy = py
        mnode.setPos(hx, hy)

        for plugin_instance in mnode.plugins.plugin_instances:
            plugin_name = plugin_instance.instances_name
            for pin, pin_data in plugin_instance.pins().items():
                pin = pin_data.get("pin")
                if pin:
                    bpin = f"{slot}:{pin}"
                    edge = NodeEdge(self.scene, "pin", self.bnode, bpin, mnode, pin, color=colors[0])
                    self.scene.addItem(edge)

            plugin_config = plugin_instance.plugin_setup
            signals = plugin_config.get("signals")
            if signals:
                for signal_name, signal in signals.items():
                    halname = f"rio.{plugin_instance.signal_prefix}.{signal_name}"
                    if halname not in self.halpins:
                        self.halpins[halname] = {
                            "type": "",
                            "target": "",
                            "source": (mnode, f"{plugin_name}:{signal_name}"),
                        }
                    net = signal.get("net")
                    if net:
                        self.halpins[halname]["type"] = "net"
                        self.halpins[halname]["target"] = net
                    setp = signal.get("setp")
                    if setp:
                        self.halpins[halname]["type"] = "setp"
                        self.halpins[halname]["target"] = setp

            is_joint = plugin_config.get("is_joint")
            if plugin_instance.SIGNALS and is_joint:
                for signal_name, signal in plugin_instance.SIGNALS.items():
                    halname = f"rio.{plugin_instance.signal_prefix}.{signal_name}"
                    if is_joint and signal_name in {"velocity", "position"}:
                        if halname not in self.halpins:
                            self.halpins[halname] = {
                                "type": "",
                                "target": "",
                                "source": (mnode, signal_name),
                            }
                        self.halpins[halname]["type"] = "joint"
                        self.halpins[halname]["target"] = f"joint.{self.joints}.{signal_name}"
                self.joints += 1

        self.scene.addItem(mnode)

        ph = 260
        ph = max(ph, mnode.height) + 5
        return ph

    def breakout_by_name(self, breakout_name):
        for item in self.scene.items():
            if isinstance(item, BreakoutNode) and item.name == breakout_name:
                return item
        return None

    def insert_plugin(self, plugin_instance, py=100):
        plugin_config = plugin_instance.plugin_setup
        pnode = PluginNode(self.scene, plugin_instance)

        # if hasattr(plugin_instance, "cfggraph"):
        #    (p_lcports, p_signalports) = plugin_instance.cfggraph(plugin_instance.instances_name, self.cfggraph)
        #    print(p_lcports, p_signalports)

        if "pos" in plugin_config:
            hx = plugin_config["pos"][0]
            hy = plugin_config["pos"][1]
        elif self.scene.insert_position is not None:
            hx = self.scene.insert_position.x()
            hy = self.scene.insert_position.y()
            self.scene.insert_position = None
        else:
            hx = 850
            hy = py
        pnode.setPos(hx, hy)
        self.scene.addItem(pnode)

        ph = 0
        if plugin_config.get("pins"):
            color_n = 0
            for pin, pin_defaults in plugin_instance.PINDEFAULTS.items():
                pindata = plugin_config.get("pins", {}).get(pin)
                if pindata is None or "pin" not in pindata or not pindata["pin"]:
                    continue

                if ":" in pindata["pin"] and len(pindata["pin"].split(":")) == 3:
                    splitted = pindata["pin"].split(":")
                    bpin = ":".join(splitted[1:])
                    breakout_name = splitted[0]

                    bnode = self.breakout_by_name(breakout_name)
                    if not bnode:
                        continue

                    # print(breakout_name, bnode, bpin)
                    last_con = (bnode, bpin)
                else:
                    last_con = (self.bnode, pindata["pin"])

                # print("##", last_con)

                if pindata.get("modifier"):
                    for pmn, modifier in enumerate(pindata.get("modifier")):
                        mnode = ModifierNode(self.scene, modifier)
                        if modifier.get("pos"):
                            mnode.setPos(modifier["pos"][0], modifier["pos"][1])
                        else:
                            mnode.setPos(550 + pmn * 140, py + ph)
                        self.scene.addItem(mnode)
                        edge = NodeEdge(self.scene, "pin", last_con[0], last_con[1], mnode, "in", color=colors[color_n])
                        self.scene.addItem(edge)
                        last_con = (mnode, "out")
                    ph += 25

                edge = NodeEdge(self.scene, "pin", last_con[0], last_con[1], pnode, pin, color=colors[color_n])
                self.scene.addItem(edge)
                color_n += 1

        signals = plugin_config.get("signals")
        if signals:
            for signal_name, signal in signals.items():
                halname = f"rio.{plugin_instance.signal_prefix}.{signal_name}"
                if halname not in self.halpins:
                    self.halpins[halname] = {
                        "type": "",
                        "target": "",
                        "source": (pnode, signal_name),
                    }
                net = signal.get("net")
                if net:
                    self.halpins[halname]["type"] = "net"
                    self.halpins[halname]["target"] = net
                setp = signal.get("setp")
                if setp:
                    self.halpins[halname]["type"] = "setp"
                    self.halpins[halname]["target"] = setp

        is_joint = plugin_config.get("is_joint")
        if plugin_instance.SIGNALS and is_joint:
            for signal_name, signal in plugin_instance.SIGNALS.items():
                halname = f"rio.{plugin_instance.signal_prefix}.{signal_name}"
                if is_joint and signal_name in {"velocity", "position"}:
                    if halname not in self.halpins:
                        self.halpins[halname] = {
                            "type": "",
                            "target": "",
                            "source": (pnode, signal_name),
                        }
                    self.halpins[halname]["type"] = "joint"
                    self.halpins[halname]["target"] = f"joint.{self.joints}.{signal_name}"
            self.joints += 1
        ph = max(ph, pnode.height) + 5
        return ph

    def add_modifier(self):
        for item in self.scene.selectedItems():
            if isinstance(item, NodeEdge):
                source_node = item._source_node
                source_port = item._source_port
                des_node = item._target_node
                des_port = item._target_port
                source_x = item._source_node.port_pos(item._source_port).x()
                source_y = item._source_node.port_pos(item._source_port).y()
                des_x = item._target_node.port_pos(item._target_port).x()
                des_y = item._target_node.port_pos(item._target_port).y()
                color = item.color
                self.scene.removeItem(item)
                # add node
                modifier_node = ModifierNode(self.scene, {"type": "debounce"})
                # pos between source and des
                x = source_x + (des_x - source_x) / 2 - 50
                y = source_y + (des_y - source_y) / 2 - 10
                modifier_node.setPos(x, y)
                # reconnect
                self.scene.addItem(modifier_node)
                edge = NodeEdge(self.scene, "pin", source_node, source_port, modifier_node, "in", color)
                self.scene.addItem(edge)
                edge = NodeEdge(self.scene, "pin", modifier_node, "out", des_node, des_port, color)
                self.scene.addItem(edge)
        self.snapshot()

    def edit_item(self, obj, key, var_setup=None, cb=None, help_text=None, need_enter=False):
        if var_setup is None:
            var_setup = {}
        if help_text is None:
            help_text = var_setup.get("help_text", var_setup.get("description"))
        if var_setup["type"] == "select":
            return edit_combobox(self, obj, key, var_setup.get("options", []), cb=cb, help_text=help_text, default=var_setup.get("default"), need_enter=need_enter)
        elif var_setup["type"] is int:
            return edit_int(self, obj, key, vmin=var_setup.get("min"), vmax=var_setup.get("max"), cb=cb, help_text=help_text, default=var_setup.get("default"))
        elif var_setup["type"] is float:
            return edit_float(self, obj, key, vmin=var_setup.get("min"), vmax=var_setup.get("max"), cb=cb, help_text=help_text, default=var_setup.get("default"), decimals=var_setup.get("decimals"))
        elif var_setup["type"] is bool:
            return edit_bool(self, obj, key, cb=cb, help_text=help_text, default=var_setup.get("default"))
        elif var_setup["type"] == "file":
            return edit_file(self, obj, key, cb=cb, help_text=help_text, default=var_setup.get("default"))
        elif var_setup["type"] == "avgfilter":
            return edit_avgfilter(self, obj, key, vmin=0, vmax=10000, cb=cb, help_text=help_text, default=var_setup.get("default"))
        elif var_setup["type"] == "vpins":
            default = var_setup.get("default")
            options = ["sysclk", "ERROR", "ESTOP", "INTERFACE_SYNC"]
            for plugin_instance in self.plugins.plugin_instances:
                for pin, pin_data in plugin_instance.pins().items():
                    direction = pin_data.get("direction")
                    varname = pin_data.get("varname")
                    if varname and direction in {"input", "output"}:
                        options.append(varname)
                        options.append(f"{varname}_RAW")
            if default not in options:
                options.append(default)
            return edit_combobox(self, obj, key, options, cb=cb, help_text=help_text, default=default)
        return edit_text(self, obj, key, cb=cb, help_text=help_text, default=var_setup.get("default"))

    def edit_selection(self):
        for item in self.scene.selectedItems():
            if isinstance(item, PluginNode):
                self.gui_plugins.edit_plugin(item.plugin_instance, None)
                self.redraw()
                self.snapshot()
                break

    def delete_selection(self):
        for item in self.scene.selectedItems():
            if isinstance(item, BoardNode):
                continue

            elif isinstance(item, BreakoutNode):
                breakout_name = item.name
                for subitem in self.scene.items():
                    if isinstance(subitem, NodeEdge):
                        if subitem.etype == f"breakout:{breakout_name}":
                            self.scene.removeItem(subitem)
                for breakout_id, breakout_config in enumerate(self.config.get("breakouts", [])):
                    if breakout_config["name"] == item.name:
                        del self.config["breakouts"][breakout_id]

            elif isinstance(item, ModifierNode):
                source = self.get_next(item, "in")
                target = self.get_next(item, "out")
                if source and target:
                    # reconnect source and target
                    edge = NodeEdge(self.scene, "pin", source[0], source[1], target[0], target[1], color=target[2].color)
                    self.scene.addItem(edge)
                self.scene.disconnect_node(item)

            elif isinstance(item, NodeEdge):
                if item.etype.startswith("breakout:"):
                    breakout_name = item.etype.split(":")[1]
                    bnode = self.breakout_by_name(breakout_name)
                    if bnode:
                        bnode.breakout_setup["slot"] = ""

                    # removing all Edges for this slot
                    for subitem in self.scene.items():
                        if isinstance(subitem, NodeEdge):
                            if subitem.etype == f"breakout:{breakout_name}":
                                self.scene.removeItem(subitem)
                    continue
                self.update_halpins_from_edges()

            elif isinstance(item, ModuleNode):
                self.scene.disconnect_node(item)

            elif isinstance(item, PluginNode):
                self.scene.disconnect_node(item)
                # remove plugin from cfg
                plugin_instance = item.plugin_instance
                plugin_config = plugin_instance.plugin_setup
                for pn, plugin in enumerate(self.config["plugins"]):
                    if plugin == plugin_config:
                        self.config["plugins"].pop(pn)
            self.scene.removeItem(item)
        self.snapshot()

    def get_next(self, node, port):
        for item in self.scene.items():
            if isinstance(item, NodeEdge) and item._target_node == node and item._target_port == port:
                return (item._source_node, item._source_port, item)
            elif isinstance(item, NodeEdge) and item._source_node == node and item._source_port == port:
                return (item._target_node, item._target_port, item)
        return None

    def get_source(self, node, port, modifiers):
        for item in self.scene.items():
            if isinstance(item, NodeEdge) and item._target_node == node and item._target_port == port:
                if isinstance(item._source_node, ModifierNode):
                    modifiers.append(item._source_node.modifier)
                    source = self.get_source(item._source_node, "in", modifiers)
                    return source
                else:
                    return (item._source_node, item._source_port)
        return None


print("######## WIP - only for testing ########")
app = QApplication(sys.argv)
Window()
app.exec()
